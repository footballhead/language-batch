'scopeName': 'source.bat'
'fileTypes': [
  'bat',
  'cmd',
  'btm'
]
'name': 'Batch'
'patterns': [
  # single line comments
  {
    'match': '(REM|rem).*$|::.*$'
    'name': 'comment.line.batch'
  }
  # label declaration
  {
    'captures':
      '1':
        'name': 'entity.name.section.batch'
      '3':
        'name': 'comment.line.batch'
    'match': '^(:[^ \\n]*)( |\\n)(.*)'
  }
  # user-defined/environment variable substitution
  {
    'match': '%%?(~[fdpnxatz]*)?([0-9]+|[A-Za-z][^A-Za-z])'
    'name': 'variable.other.batch'
  }
  # escaped characters
  {
    'match': '\\^.|%%'
    'name': 'constant.character.escape.batch'
  }
  # goto label
  {
    'captures':
      '1':
        'name': 'keyword.control.batch'
      '2':
        'name': 'entity.name.section.batch'
    'match': '\\b(GOTO|goto)\\b(.*)'
  }
  # delayed expansion
  {
    'name': 'variable.other.batch'
    'match': '![^!]*!'
  }
  # user-defined/environment variable substitution
  {
    'match': '%\\*'
    'name': 'variable.other.batch'
  }

  # user-defined/environment variable substitution
  {
    'begin': '%'
    'end': '%'
    'name': 'variable.other.batch'
  }
  # set variable
  {
    'captures':
      '1':
        'name': 'support.function.batch'
      '2':
        'name': 'variable.other.batch'
      '3':
        'name': 'keyword.operator.batch'
    'match': '\\b(SET|set)\\b([^=]+)(=)'
  }
  # single-quote strings
  {
    'match': '\'[^\']*\''
    'name' : 'string.quoted.single.batch'
  }
  # double-quote strings
  {
    'match': '\"[^\"]*\"'
    'name' : 'string.quoted.double.batch'
  }
  # built-in non-control functionality
  {
    'match': '\\b(?i)(assoc|cd|cls|color|copy|date|del|dir|echo|endlocal|erase|ftype|md|mklink|move|path|popd|prompt|pushd|ren|rd|setlocal|shift|start|time|title|ver|verify|vol)\\b'
    'name': 'support.function.batch'
  }
  # control keywords
  {
    'match': '\\b(?i)(if|for|else|do|return|exit|pause|call)\\b'
    'name': 'keyword.control.batch'
  }
  # ERRORLEVEL
  {
    'match': '\\b(?i)(errorlevel|exist|in|neq|not)\\b'
    'name': 'keyword.other.batch'
  }
  # ERRORLEVEL
  {
    'match': '(?i)(nul)'
    'name': 'keyword.other.batch'
  }
  # operators (pipes, redirects, etc)
  {
    'match': '@|\\||[0-9]?>>?|&[0-9]?|\\+|==|nul'
    'name': 'keyword.operator.batch'
  }
  # constant numbers
  {
    'captures':
      '1':
        'name': 'constant.numeric.batch'
    'match': '\\b([0-9]+)\\b'
    'name': 'meta.numberic.batch'
  }
]
